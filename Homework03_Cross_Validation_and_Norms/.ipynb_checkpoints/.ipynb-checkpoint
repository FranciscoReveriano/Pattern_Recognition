{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Homework #3: Cross-Validation and Norms\n",
    "by Francisco Reveriano"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cross-validation is used for both model selection and hyperparameter selection, to ensure the chosen model and/or hyperparameters(s) are not too highly tuned (\"overfit\") to the data. Here you are going to explore the impact of cross-validation to select a model to predict a car's price from its characteristics. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "from tqdm.notebook import trange, tqdm\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.neighbors import KernelDensity\n",
    "import torch\n",
    "from torch.autograd import Variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Problem-1\" data-toc-modified-id=\"Problem-1-1\">Problem 1</a></span><ul class=\"toc-item\"><li><span><a href=\"#Reload-Data\" data-toc-modified-id=\"Reload-Data-1.1\">Reload Data</a></span></li><li><span><a href=\"#Problem-A\" data-toc-modified-id=\"Problem-A-1.2\">Problem A</a></span><ul class=\"toc-item\"><li><span><a href=\"#Part-i\" data-toc-modified-id=\"Part-i-1.2.1\">Part i</a></span></li><li><span><a href=\"#Part-ii\" data-toc-modified-id=\"Part-ii-1.2.2\">Part ii</a></span></li><li><span><a href=\"#Part-iii\" data-toc-modified-id=\"Part-iii-1.2.3\">Part iii</a></span></li><li><span><a href=\"#Part-iv\" data-toc-modified-id=\"Part-iv-1.2.4\">Part iv</a></span></li><li><span><a href=\"#Part-v\" data-toc-modified-id=\"Part-v-1.2.5\">Part v</a></span></li></ul></li></ul></li><li><span><a href=\"#Problem-B\" data-toc-modified-id=\"Problem-B-2\">Problem B</a></span><ul class=\"toc-item\"><li><span><a href=\"#Part-i\" data-toc-modified-id=\"Part-i-2.1\">Part i</a></span></li><li><span><a href=\"#Part-ii\" data-toc-modified-id=\"Part-ii-2.2\">Part ii</a></span></li><li><span><a href=\"#Part-iii\" data-toc-modified-id=\"Part-iii-2.3\">Part iii</a></span></li><li><span><a href=\"#Part-iv\" data-toc-modified-id=\"Part-iv-2.4\">Part iv</a></span></li><li><span><a href=\"#Part-v\" data-toc-modified-id=\"Part-v-2.5\">Part v</a></span></li></ul></li><li><span><a href=\"#Problem-C\" data-toc-modified-id=\"Problem-C-3\">Problem C</a></span><ul class=\"toc-item\"><li><span><a href=\"#Part-i\" data-toc-modified-id=\"Part-i-3.1\">Part i</a></span></li><li><span><a href=\"#Part-ii\" data-toc-modified-id=\"Part-ii-3.2\">Part ii</a></span></li><li><span><a href=\"#Part-iii\" data-toc-modified-id=\"Part-iii-3.3\">Part iii</a></span></li><li><span><a href=\"#Part-iv\" data-toc-modified-id=\"Part-iv-3.4\">Part iv</a></span></li><li><span><a href=\"#Part-v\" data-toc-modified-id=\"Part-v-3.5\">Part v</a></span></li></ul></li><li><span><a href=\"#Problem-2\" data-toc-modified-id=\"Problem-2-4\">Problem 2</a></span><ul class=\"toc-item\"><li><span><a href=\"#Problem-A\" data-toc-modified-id=\"Problem-A-4.1\">Problem A</a></span><ul class=\"toc-item\"><li><span><a href=\"#Part-i\" data-toc-modified-id=\"Part-i-4.1.1\">Part i</a></span></li><li><span><a href=\"#Part-ii\" data-toc-modified-id=\"Part-ii-4.1.2\">Part ii</a></span></li><li><span><a href=\"#Part-iii¶\" data-toc-modified-id=\"Part-iii¶-4.1.3\">Part iii¶</a></span></li><li><span><a href=\"#Part-iv\" data-toc-modified-id=\"Part-iv-4.1.4\">Part iv</a></span></li></ul></li></ul></li><li><span><a href=\"#Problem-B\" data-toc-modified-id=\"Problem-B-5\">Problem B</a></span><ul class=\"toc-item\"><li><ul class=\"toc-item\"><li><span><a href=\"#Part-i\" data-toc-modified-id=\"Part-i-5.0.1\">Part i</a></span></li><li><span><a href=\"#Part-ii\" data-toc-modified-id=\"Part-ii-5.0.2\">Part ii</a></span></li><li><span><a href=\"#Part-iii¶\" data-toc-modified-id=\"Part-iii¶-5.0.3\">Part iii¶</a></span></li><li><span><a href=\"#Part-iv\" data-toc-modified-id=\"Part-iv-5.0.4\">Part iv</a></span></li></ul></li></ul></li><li><span><a href=\"#Problem-C\" data-toc-modified-id=\"Problem-C-6\">Problem C</a></span><ul class=\"toc-item\"><li><ul class=\"toc-item\"><li><span><a href=\"#Part-i\" data-toc-modified-id=\"Part-i-6.0.1\">Part i</a></span></li><li><span><a href=\"#Part-ii\" data-toc-modified-id=\"Part-ii-6.0.2\">Part ii</a></span></li><li><span><a href=\"#Part-iii¶\" data-toc-modified-id=\"Part-iii¶-6.0.3\">Part iii¶</a></span></li><li><span><a href=\"#Part-iv\" data-toc-modified-id=\"Part-iv-6.0.4\">Part iv</a></span></li></ul></li></ul></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem 1\n",
    "\n",
    "Continuing with the 13 continous predictor variables from the Automobile Data Set from the UCI Machine Learning Respository that you used in Homework #2 to predict a car's price from its characteristics, you are going to further explore the 3 models you proposed in problem 2(a) in Homework #2. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reload Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The first part is reading the dataset. With Pandas I can treat the dataset as if it was a .csv file. \n",
    "data = pd.read_csv(\"imports-85.data\", header=None)\n",
    "\n",
    "# At this point the dataset has no header. It is easier for me to place a header to make it easier to choose columns\n",
    "headers = [\"symboling\",\"normalized-losses\",\"make\",\"fuel-type\",\"aspiration\", \"num-of-doors\",\"body-style\",\n",
    "         \"drive-wheels\",\"engine-location\",\"wheel-base\", \"length\",\"width\",\"height\",\"curb-weight\",\"engine-type\",\n",
    "         \"num-of-cylinders\", \"engine-size\",\"fuel-system\",\"bore\",\"stroke\",\"compression-ratio\",\"horsepower\",\n",
    "         \"peak-rpm\",\"city-mpg\",\"highway-mpg\",\"price\"]\n",
    "\n",
    "# We add the headers to the table to make it readable. \n",
    "data.columns = headers\n",
    "\n",
    "# We can see that there are 26 columns. This means that we need to delete them. And use only the columns we have been assigned. \n",
    "# So in other words we are dropping the columns using the panda drop command function. \n",
    "data = data.drop(columns=[\"symboling\", \"normalized-losses\", \"make\", \"fuel-type\", \"aspiration\", \n",
    "                          \"num-of-doors\", \"body-style\", \"drive-wheels\", \"engine-location\"\n",
    "                          ,\"engine-type\", \"num-of-cylinders\", \"fuel-system\"])\n",
    "\n",
    "# We now proceed to reformat the dataset by first turning all the '?' into 'NaN'\n",
    "data[\"price\"] = pd.to_numeric(data[\"price\"], errors='coerce')\n",
    "data[\"bore\"] = pd.to_numeric(data[\"bore\"], errors='coerce')\n",
    "data[\"stroke\"] = pd.to_numeric(data[\"stroke\"], errors='coerce')\n",
    "data[\"compression-ratio\"]= pd.to_numeric(data[\"compression-ratio\"], errors='coerce')\n",
    "data[\"horsepower\"]= pd.to_numeric(data[\"horsepower\"], errors='coerce')\n",
    "# We then proceed to drop the NaN\n",
    "data = data.dropna(subset=[\"price\"], axis = 0)\n",
    "#data = data.dropna(subset=[\"bore\"], axis= 0)\n",
    "data = data.dropna()\n",
    "\n",
    "# Make a copy of the model\n",
    "Model = data.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem A\n",
    "\n",
    "Remind us what your proposed model #1 is (write down the equation price = f(features, w), with the parameters w unspecified). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "price = wheel-base + length + width + height + curb-weight + engine-size + bore + stroke + compression-ratio + horsepower + peak-rpm + city-mpg + highway-mpg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Regular Regression Model\n",
      "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)\n",
      "Intercept: -62068.15319037426\n",
      "Coefficients: [ 7.04671241e+01 -8.97337480e+01  6.20846258e+02  3.19938816e+02\n",
      "  1.71246392e+00  1.26674808e+02 -9.18710926e+02 -2.96297261e+03\n",
      "  2.39724757e+02  3.80152790e+01  2.08564561e+00 -3.08035124e+02\n",
      "  2.83956094e+02]\n"
     ]
    }
   ],
   "source": [
    "# Call Linear Regression\n",
    "Linear_Model_1 = LinearRegression()\n",
    "\n",
    "# We first set a new dataframe\n",
    "Model_1 = Model.copy()\n",
    "\n",
    "# Create the X Variables in our model\n",
    "X = Model_1[[\"wheel-base\", \"length\", \"width\", \"height\", \"curb-weight\", \"engine-size\", \"bore\", \"stroke\",\n",
    "               \"compression-ratio\", \"horsepower\", \"peak-rpm\", \"city-mpg\", \"highway-mpg\"]]\n",
    "\n",
    "# Create the Y Variable in our model\n",
    "Y = Model_1[\"price\"]\n",
    "\n",
    "# Now We Proceed to run the linear regression\n",
    "Linear_Model_1.fit(X,Y)\n",
    "\n",
    "print(\"Regular Regression Model\")\n",
    "print(Linear_Model_1)\n",
    "print(\"Intercept:\", Linear_Model_1.intercept_)\n",
    "print(\"Coefficients:\", Linear_Model_1.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For your proposed model #1, perform linear regression with 3-10-folds cross-validation (3 independent repetitions of 10-folds cross-validation) to evaluate the consistency in both the estimated model and the model performance. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KFold(n_splits=10, random_state=None, shuffle=True)\n",
      "Mean Square Error\n",
      "[5116932.925341364, 7660761.548304188, 13402023.73927109, 5252557.02186971, 24376494.41516567, 9099541.170359496, 4488705.0305717895, 9657517.307488225, 13193615.294292837, 21270520.81634861, 14154914.101977903, 8829134.094275914, 11891648.99799427, 10614367.625118705, 10167727.14455915, 21033819.130522214, 8247319.8271173835, 2070286.3137446258, 19766027.361112427, 4724036.544015231, 22480017.092811704, 4218863.919342137, 14742487.554215034, 13768431.765751055, 14176636.19356666, 6998992.825383765, 14681636.443395128, 10634878.740536977, 5669086.507717915, 8128792.251411819]\n"
     ]
    }
   ],
   "source": [
    "# Set Up The K-Folds\n",
    "K = 10\n",
    "kf = KFold(n_splits=10, shuffle=True)\n",
    "print(kf)\n",
    "\n",
    "# Run the K-Fold Split Three times\n",
    "MSE_List = []\n",
    "Sample_Count = 1\n",
    "KDE_List = []\n",
    "for i in range(3):\n",
    "    for train_index, test_index in kf.split(X):\n",
    "        Linear_Model = LinearRegression()\n",
    "        x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n",
    "        y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n",
    "        Linear_Model.fit(x_train, y_train)\n",
    "        y_pred = Linear_Model.predict(x_test)\n",
    "        MSE = mean_squared_error(y_test, y_pred)\n",
    "        MSE_List.append(MSE)\n",
    "        # Create List For Kerndel Density Estimate\n",
    "        temp = []\n",
    "        temp.append(Sample_Count)\n",
    "        temp.append(MSE)\n",
    "        KDE_List.append(temp)\n",
    "        # Update Sample_Count\n",
    "        Sample_Count += 1\n",
    "        \n",
    "print(\"Mean Square Error\")\n",
    "print(MSE_List)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part i\n",
    "Plot a kernel density estimate for the mean square error (MSE) for this model. (Each fold yields an estimate of MSE; find the kernel density estimate using the 30 samples of MSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of MSE Observations: 30\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'MSE')"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print Number of MSE Observations\n",
    "print(\"Number of MSE Observations:\", len(MSE_List))\n",
    "\n",
    "# Plot Density Estimate\n",
    "sns.distplot(MSE_List, kde=True, color='blue',hist_kws={'edgecolor':'black'}, rug=True)\n",
    "# Add Labels\n",
    "plt.title(\"Kernel Density Estimate of MSE\")\n",
    "plt.xlabel(\"Exam\")\n",
    "plt.ylabel(\"MSE\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part ii\n",
    "What is E[MSE] for this model? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expected_MSE: 11350592.4567861\n"
     ]
    }
   ],
   "source": [
    "# Average \n",
    "Expected_MSE = np.average(MSE_List)\n",
    "print(\"Expected_MSE:\", average)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part iii\n",
    "Compute the variance for this model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance: 33811196414199.96\n"
     ]
    }
   ],
   "source": [
    "# Variance\n",
    "variance = np.var(MSE_List)\n",
    "print(\"Variance:\", variance)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part iv\n",
    "\n",
    "Find the (bias)^2 + noise variance for this model, assuming E{MSE} is a good approximation for MSE. (Recall: MSE = E{(t −tˆ)^2} = variance+ (bias)^2 +noise variance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bias ^2 + noise variance = -33811185063607.504\n"
     ]
    }
   ],
   "source": [
    "# bias^2 + noise variance \n",
    "bias_noise_var = Expected_MSE - variance\n",
    "print(\"Bias ^2 + noise variance =\", bias_noise_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part v"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This honestly does not seem to be a very good model. \n",
    "Honestly the numbers needed to be normalized because I am not able to understand anything this model is saying. Due to the size of the values. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem B\n",
    "Remind us what your proposed model #2 is (write down the equation price = f(features, W)), with the parameters w unspecified"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "price = curb-weight + horsepower + city-mpg"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For your proposed model #2, perform linear regression with 3-10 folds cross validation (3 independent repetitions of 10-folds cross-validation) to evaluate the consistency in both the estiamted model and the model performance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part i\n",
    "\n",
    "Plot a kernel density estimate for the mean square error (MSE) for this model. (Each fold yields an estimate of MSE; find the density estimate using these 30 samples of MSE. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept: -26414.57332038961\n",
      "Coefficients: [  8.85397529 110.40317119 220.84231988]\n"
     ]
    }
   ],
   "source": [
    "# Call Linear Regression\n",
    "Linear_Model_2 = LinearRegression()\n",
    "Linear_Model_2\n",
    "\n",
    "# We first set a new dataframe\n",
    "Model_2 = Model.copy()\n",
    "\n",
    "# Create the X Variables in our model\n",
    "X = Model_2[[\"curb-weight\", \"horsepower\", \"city-mpg\"]]\n",
    "\n",
    "# Create the Y Variable in our model\n",
    "Y = Model_2[\"price\"]\n",
    "\n",
    "# Now We Proceed to run the linear regression\n",
    "Linear_Model_2.fit(X,Y)\n",
    "\n",
    "print(\"Intercept:\", Linear_Model_2.intercept_)\n",
    "print(\"Coefficients:\", Linear_Model_2.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KFold(n_splits=10, random_state=None, shuffle=True)\n",
      "Mean Square Error\n",
      "[12949666.827466503, 16707805.216451269, 18592396.15714639, 15215078.33491925, 13872359.145327885, 20328014.157957748, 19770557.404274076, 4875431.22492279, 18710531.512007017, 7647434.564850129, 24742391.92431698, 22373295.42082166, 10564237.363579918, 11686951.7505644, 18124302.172086477, 8631529.342317786, 10004101.668686636, 14713390.839184586, 7593154.239895198, 20438618.120603953, 6831757.603580478, 17853646.900603566, 12231553.989027645, 13805757.324992493, 15409814.450023394, 13605787.459717229, 32632764.88579375, 9769970.381696634, 21099011.17844709, 10876442.070463527]\n"
     ]
    }
   ],
   "source": [
    "# Set Up The K-Folds\n",
    "K = 10\n",
    "kf = KFold(n_splits=10, shuffle=True)\n",
    "print(kf)\n",
    "\n",
    "# Run the K-Fold Split Three times\n",
    "MSE_List2 = []\n",
    "Sample_Count = 1\n",
    "KDE_List = []\n",
    "for i in range(3):\n",
    "    for train_index, test_index in kf.split(X):\n",
    "        Linear_Model = LinearRegression()\n",
    "        x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n",
    "        y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n",
    "        Linear_Model.fit(x_train, y_train)\n",
    "        y_pred = Linear_Model.predict(x_test)\n",
    "        MSE = mean_squared_error(y_test, y_pred)\n",
    "        MSE_List2.append(MSE)\n",
    "        # Create List For Kerndel Density Estimate\n",
    "        temp = []\n",
    "        temp.append(Sample_Count)\n",
    "        temp.append(MSE)\n",
    "        KDE_List.append(temp)\n",
    "        # Update Sample_Count\n",
    "        Sample_Count += 1\n",
    "        \n",
    "print(\"Mean Square Error\")\n",
    "print(MSE_List2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of MSE Observations: 30\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'MSE')"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print Number of MSE Observations\n",
    "print(\"Number of MSE Observations:\", len(MSE_List2))\n",
    "\n",
    "# Plot Density Estimate\n",
    "sns.distplot(MSE_List2, kde=True, color='blue',hist_kws={'edgecolor':'black'}, rug=True)\n",
    "# Add Labels\n",
    "plt.title(\"Kernel Density Estimate of MSE\")\n",
    "plt.xlabel(\"Exam\")\n",
    "plt.ylabel(\"MSE\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part ii\n",
    "\n",
    "What is E[MSE] for this model? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expected_MSE: 11350592.4567861\n"
     ]
    }
   ],
   "source": [
    "# Average \n",
    "Expected_MSE = np.average(MSE_List2)\n",
    "print(\"Expected_MSE:\", average)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part iii\n",
    "\n",
    "Compute the variance for this model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance: 52026816256079.3\n"
     ]
    }
   ],
   "source": [
    "# Variance\n",
    "variance = np.var(MSE_List2)\n",
    "print(\"Variance:\", variance)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part iv\n",
    "\n",
    "Find the (bias)^2 + noise variance for this model, assuming E{MSE} is a good approximation for MSE. (Recall: MSE = E{(t −tˆ)^2} = variance+ (bias)^2 +noise variance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bias ^2 + noise variance = -52026800936270.875\n"
     ]
    }
   ],
   "source": [
    "# bias^2 + noise variance \n",
    "bias_noise_var = Expected_MSE - variance\n",
    "print(\"Bias ^2 + noise variance =\", bias_noise_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part v\n",
    "\n",
    "What is your impression of the variance of this model versus the (bias)^2 of noise variance for this model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I can't tell from the numbers if its good or bad. The numbers are to huge to adequately compare. This dataset required normalization in order to make a proper model. It is pretty obvious that they are pretty close. Basically just the negative of each other. Once again since numbers were not normalized it is very hard to understand. Our Density curve though shows that this graph was not as as gaussian as our first model. This means that there is more variance in our errors. So this model does not fit as well as the first model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem C"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remind us what your proposed model #2 is (write down the equation price = f(features, W)), with the parameters w unspecified\n",
    "\n",
    "price = length + curb-weight + engine-size + horsepower + city-mpg + compression-ratio\n",
    "\n",
    "For your proposed model #2, perform linear regression with 3-10 folds cross validation (3 independent repetitions of 10-folds cross-validation) to evaluate the consistency in both the estiamted model and the model performance. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part i\n",
    "\n",
    "Plot a kernel density estimate for the mean square error (MSE) for this model. (Each fold yields an estimate of MSE; find the density estimate using these 30 samples of MSE.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept: -17119.50602269183\n",
      "Coefficients: [ 38.58612598   1.68374011  53.15476587 100.98595441 -38.21964922\n",
      " 185.91064508]\n"
     ]
    }
   ],
   "source": [
    "# Call Linear Regression\n",
    "Linear_Model_3 = LinearRegression()\n",
    "Linear_Model_3\n",
    "\n",
    "# We first set a new dataframe\n",
    "Model_3 = Model.copy()\n",
    "\n",
    "# Create the X Variables in our model\n",
    "X = Model_3[[\"length\",\"curb-weight\", \"horsepower\",\"engine-size\", \"city-mpg\", \"compression-ratio\"]]\n",
    "\n",
    "# Create the Y Variable in our model\n",
    "Y = Model_3[\"price\"]\n",
    "\n",
    "# Now We Proceed to run the linear regression\n",
    "Linear_Model_3.fit(X,Y)\n",
    "\n",
    "print(\"Intercept:\", Linear_Model_3.intercept_)\n",
    "print(\"Coefficients:\", Linear_Model_3.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KFold(n_splits=10, random_state=None, shuffle=True)\n",
      "Mean Square Error\n",
      "[14074178.457745994, 8815119.144513302, 15658122.147262689, 14612203.840144247, 12333802.239514504, 5012028.450652399, 6531446.095607942, 20311088.751384605, 19544843.247916676, 10209321.872896148, 13877247.588796243, 6401043.909566216, 26175300.243911214, 10477929.863847392, 10145453.127410524, 20560423.707148623, 7337647.077240147, 8346901.876953884, 12960982.795417432, 14289697.7521612, 19511476.621597607, 18157440.009206258, 9792279.065054068, 15909703.894346451, 12887867.12619219, 8273760.314007014, 18477791.5571081, 7746335.99073228, 6210175.548799352, 8479608.296041584]\n"
     ]
    }
   ],
   "source": [
    "# Set Up The K-Folds\n",
    "K = 10\n",
    "kf = KFold(n_splits=10, shuffle=True)\n",
    "print(kf)\n",
    "\n",
    "# Run the K-Fold Split Three times\n",
    "MSE_List3 = []\n",
    "Sample_Count = 1\n",
    "KDE_List = []\n",
    "for i in range(3):\n",
    "    for train_index, test_index in kf.split(X):\n",
    "        Linear_Model = LinearRegression()\n",
    "        x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n",
    "        y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n",
    "        Linear_Model.fit(x_train, y_train)\n",
    "        y_pred = Linear_Model.predict(x_test)\n",
    "        MSE = mean_squared_error(y_test, y_pred)\n",
    "        MSE_List3.append(MSE)\n",
    "        # Create List For Kerndel Density Estimate\n",
    "        temp = []\n",
    "        temp.append(Sample_Count)\n",
    "        temp.append(MSE)\n",
    "        KDE_List.append(temp)\n",
    "        # Update Sample_Count\n",
    "        Sample_Count += 1\n",
    "        \n",
    "print(\"Mean Square Error\")\n",
    "print(MSE_List3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of MSE Observations: 30\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'MSE')"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print Number of MSE Observations\n",
    "print(\"Number of MSE Observations:\", len(MSE_List2))\n",
    "\n",
    "# Plot Density Estimate\n",
    "sns.distplot(MSE_List3, kde=True, color='blue',hist_kws={'edgecolor':'black'}, rug=True)\n",
    "# Add Labels\n",
    "plt.title(\"Kernel Density Estimate of MSE\")\n",
    "plt.xlabel(\"Exam\")\n",
    "plt.ylabel(\"MSE\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part ii\n",
    "\n",
    "What is E[MSE] for this model? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expected_MSE: 11350592.4567861\n"
     ]
    }
   ],
   "source": [
    "# Average \n",
    "Expected_MSE = np.average(MSE_List3)\n",
    "print(\"Expected_MSE:\", average)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part iii\n",
    "\n",
    "Compute the variance for this model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance: 27204078534188.31\n"
     ]
    }
   ],
   "source": [
    "# Variance\n",
    "variance = np.var(MSE_List3)\n",
    "print(\"Variance:\", variance)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part iv\n",
    "\n",
    "Find the (bias)^2 + noise variance for this model, assuming E{MSE} is a good approximation for MSE. (Recall: MSE = E{(t −tˆ)^2} = variance+ (bias)^2 +noise variance)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bias ^2 + noise variance = -27204065763480.953\n"
     ]
    }
   ],
   "source": [
    "# bias^2 + noise variance \n",
    "bias_noise_var = Expected_MSE - variance\n",
    "print(\"Bias ^2 + noise variance =\", bias_noise_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part v\n",
    "\n",
    "What is your impression of the variance of this model versus the (bias)^2 of noise variance for this model. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Norms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An alternate norm commonly used in regression is the L1 norm, as the L1 norm tends to be less sensitive to high leverage data points (data points with large residuals). Here, you are going to explore the impact of using the L1 norm, rather than the L2 norm, for predicting a car's price form its characteristics. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem 2\n",
    "\n",
    "Continuing with the 13 continuous predictor variables from the Automobile Data Set from the UCI Machine\n",
    "Learning Repository that you used in Homework #2 to predict a car’s price from its characteristics,\n",
    "you are going to continue to explore the 3 models you proposed in problem 2(a) in Homework #2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Declare Linear Regression on Torch\n",
    "class linearRegression(torch.nn.Module):\n",
    "    def __init__(self, n_features):\n",
    "        super(linearRegression, self).__init__()\n",
    "        self.linear = torch.nn.Linear(in_features=n_features, out_features=1)\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.linear(x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load DataSet Function\n",
    "def read_data():\n",
    "    # The first part is reading the dataset. With Pandas I can treat the dataset as if it was a .csv file.\n",
    "    data = pd.read_csv(\"/home/franciscoAML/Documents/ECE_580/Homework03_Cross_Validation_and_Norms/imports-85.data\", header=None)\n",
    "\n",
    "    # At this point the dataset has no header. It is easier for me to place a header to make it easier to choose columns\n",
    "    headers = [\"symboling\", \"normalized-losses\", \"make\", \"fuel-type\", \"aspiration\", \"num-of-doors\", \"body-style\",\n",
    "               \"drive-wheels\", \"engine-location\", \"wheel-base\", \"length\", \"width\", \"height\", \"curb-weight\",\n",
    "               \"engine-type\",\"num-of-cylinders\", \"engine-size\", \"fuel-system\", \"bore\", \"stroke\", \"compression-ratio\", \"horsepower\",\n",
    "               \"peak-rpm\", \"city-mpg\", \"highway-mpg\", \"price\"]\n",
    "\n",
    "    # We add the headers to the table to make it readable.\n",
    "    data.columns = headers\n",
    "\n",
    "    # We can see that there are 26 columns. This means that we need to delete them. And use only the columns we have been assigned.\n",
    "    # So in other words we are dropping the columns using the panda drop command function.\n",
    "    data = data.drop(columns=[\"symboling\", \"normalized-losses\", \"make\", \"fuel-type\", \"aspiration\",\"num-of-doors\", \"body-style\", \"drive-wheels\", \"engine-location\",\"engine-type\", \"num-of-cylinders\", \"fuel-system\"])\n",
    "\n",
    "    # We now proceed to reformat the dataset by first turning all the '?' into 'NaN'\n",
    "    data[\"price\"] = pd.to_numeric(data[\"price\"], errors='coerce')\n",
    "    data[\"bore\"] = pd.to_numeric(data[\"bore\"], errors='coerce')\n",
    "    data[\"stroke\"] = pd.to_numeric(data[\"stroke\"], errors='coerce')\n",
    "    data[\"compression-ratio\"] = pd.to_numeric(data[\"compression-ratio\"], errors='coerce')\n",
    "    data[\"horsepower\"] = pd.to_numeric(data[\"horsepower\"], errors='coerce')\n",
    "    data[\"curb-weight\"] = pd.to_numeric(data[\"curb-weight\"], errors='coerce')\n",
    "    data[\"peak-rpm\"] = pd.to_numeric(data[\"peak-rpm\"], errors='coerce')\n",
    "    # We then proceed to drop the NaN\n",
    "    data = data.dropna(subset=[\"price\"], axis=0)\n",
    "    # data = data.dropna(subset=[\"bore\"], axis= 0)\n",
    "    data = data.dropna()\n",
    "\n",
    "    # Make a copy of the model\n",
    "    Model = data.copy()\n",
    "    return Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem A\n",
    "\n",
    "Remind us what your proposed model #1 is (write down the equation price = f(features, w), with the parameters w unspecified).\n",
    "\n",
    "price = wheel-base + length + width + height + curb-weight + engine-size + bore + stroke + compression-ratio + horsepower + peak-rpm + city-mpg + highway-mpg\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[29105547.529502057, 62965184.31676929, 42627506.851386115, 45133659.108639814, 212713880.18497548, 24564388.208119318, 83818322.44677636, 102065622.47526747, 105032816.85388727, 166873236.61366263, 114145133.93644753, 54367534.843681775, 55949629.62803032, 129319390.89811926, 51003346.53911223, 57139253.72879446, 94711503.74412039, 126968741.60269557, 120187403.1945426, 36011952.60084645, 56525930.95829277, 52429119.2122522, 31648438.678345658, 184144256.07527232, 96791930.0929192, 85797339.94431964, 95199693.71875866, 35077219.37669565, 66059668.76625401, 154748926.1335787]\n"
     ]
    }
   ],
   "source": [
    "# Prepare First Model\n",
    "Model_1 = read_data()\n",
    "\n",
    "# Create the X and Y Variables of the model\n",
    "# Create the X Variables in our model\n",
    "X = Model_1 [[\"wheel-base\", \"length\", \"width\", \"height\", \"curb-weight\", \"engine-size\", \"bore\", \"stroke\",\n",
    "             \"compression-ratio\", \"horsepower\", \"peak-rpm\", \"city-mpg\", \"highway-mpg\"]]\n",
    "\n",
    "# Create the Y Variable in our model\n",
    "Y = Model_1[\"price\"]\n",
    "\n",
    "# Set Up The K-Folds\n",
    "K = 10\n",
    "kf = KFold(n_splits=10, shuffle=True)\n",
    "\n",
    "MSE_List = []\n",
    "for i in range(3):\n",
    "    for train_index, test_index in kf.split(X):\n",
    "        # Split the Dataset\n",
    "        x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n",
    "        y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n",
    "        # Turn values into tensors\n",
    "        X_train_tensor = torch.tensor(x_train.values)\n",
    "        X_test_tensor = torch.tensor(x_test.values)\n",
    "        Y_train_tensor = torch.tensor(y_train.values).reshape(-1, 1)\n",
    "        Y_test_tensor = torch.tensor(y_test.values).reshape(-1,1)\n",
    "\n",
    "        # Set up the Model\n",
    "        Num_Features = X.shape[1]  # takes variable 'x'\n",
    "        outputDim = 1  # takes variable 'y'\n",
    "        learningRate = 0.001\n",
    "        epochs = 400\n",
    "\n",
    "        model = linearRegression(Num_Features)\n",
    "        criterion = torch.nn.L1Loss()\n",
    "        optimizer = torch.optim.SGD(model.parameters(), lr=learningRate)\n",
    "\n",
    "        # Run through the model\n",
    "        for j in range(epochs):\n",
    "            # Clear Gradients\n",
    "            optimizer.zero_grad()\n",
    "\n",
    "            # Run Model\n",
    "            outputs = model.forward(X_train_tensor.float())\n",
    "            # Get Lost for Predicted Output\n",
    "            loss = criterion(outputs, Y_train_tensor.float())\n",
    "            # Backward Propogation\n",
    "            loss.backward()\n",
    "            # Update Parameters\n",
    "            optimizer.step()\n",
    "\n",
    "        # Test Prediction of the Model\n",
    "        optimizer.zero_grad()\n",
    "        y_hat = model(X_test_tensor.float())\n",
    "\n",
    "        # Calculate MSE\n",
    "        ## Convert to Numpy\n",
    "        y_hat = y_hat.detach().numpy()\n",
    "        Y_test_tensor = Y_test_tensor.numpy()\n",
    "\n",
    "        ## Now I can calculate the MSE using Scikit Learning\n",
    "        MSE = mean_squared_error(Y_test_tensor, y_hat)\n",
    "        MSE_List.append(MSE)\n",
    "\n",
    "print(MSE_List)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".#### Part i \n",
    "\n",
    "Plot a kernel density estimate for the mean square error (MSE) for this model. (Each fold yields an estimate of MSE; find the kernel density estimate using the 30 samples of MSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of MSE Observations: 30\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'MSE')"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print Number of MSE Observations\n",
    "print(\"Number of MSE Observations:\", len(MSE_List))\n",
    "\n",
    "# Plot Density Estimate\n",
    "sns.distplot(MSE_List, kde=True, color='blue',hist_kws={'edgecolor':'black'}, rug=True)\n",
    "# Add Labels\n",
    "plt.title(\"Kernel Density Estimate of MSE\")\n",
    "plt.xlabel(\"Exam\")\n",
    "plt.ylabel(\"MSE\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part ii\n",
    "\n",
    "What is E[MSE] for this model?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expected_MSE: 11350592.4567861\n"
     ]
    }
   ],
   "source": [
    "# Average \n",
    "Expected_MSE = np.average(MSE_List)\n",
    "print(\"Expected_MSE:\", average)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part iii¶\n",
    "\n",
    "Compute the variance for this model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance: 2295532069890080.5\n"
     ]
    }
   ],
   "source": [
    "variance = np.var(MSE_List)\n",
    "print(\"Variance:\", variance)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part iv\n",
    "\n",
    "Find the (bias)^2 + noise variance for this model, assuming E{MSE} is a good approximation for MSE. (Recall: MSE = E{(t −tˆ)^2} = variance+ (bias)^2 +noise variance)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bias ^2 + noise variance = -2295531984119194.5\n"
     ]
    }
   ],
   "source": [
    "# bias^2 + noise variance \n",
    "bias_noise_var = Expected_MSE - variance\n",
    "print(\"Bias ^2 + noise variance =\", bias_noise_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem B"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remind us what your proposed model #2 is (write down the equation price = f(features, W)), with the parameters w unspecified\n",
    "\n",
    "price = curb-weight + horsepower + city-mpg\n",
    "\n",
    "For your proposed model #2, perform linear regression with 3-10 folds cross validation (3 independent repetitions of 10-folds cross-validation) to evaluate the consistency in both the estiamted model and the model performance\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[25768330.439531337, 47570263.967068195, 52488730.59944024, 31760744.008765865, 32350161.503385533, 65775424.01743186, 46090573.015347295, 6759115.618177778, 44278681.147874996, 84833747.51756717, 41269221.39631921, 54447995.59098673, 26333290.55505117, 25549757.166939188, 99245803.34734288, 33390842.255249877, 27684986.132256407, 41778164.25165834, 12466787.972089566, 60404707.98767732, 66160435.41030679, 41569884.67452202, 60556323.36505195, 16184936.552198315, 66110150.94873969, 38028649.481183305, 37535615.717757575, 55286052.42352867, 28260150.788367484, 18694847.463525385]\n"
     ]
    }
   ],
   "source": [
    "# Prepare First Model\n",
    "Model_1 = read_data()\n",
    "\n",
    "# Create the X and Y Variables of the model\n",
    "# Create the X Variables in our model\n",
    "X = Model_1[[\"curb-weight\", \"horsepower\", \"city-mpg\"]]\n",
    "\n",
    "# Create the Y Variable in our model\n",
    "Y = Model_1[\"price\"]\n",
    "\n",
    "# Set Up The K-Folds\n",
    "K = 10\n",
    "kf = KFold(n_splits=10, shuffle=True)\n",
    "\n",
    "MSE_List = []\n",
    "for i in range(3):\n",
    "    for train_index, test_index in kf.split(X):\n",
    "        # Split the Dataset\n",
    "        x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n",
    "        y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n",
    "        # Turn values into tensors\n",
    "        X_train_tensor = torch.tensor(x_train.values)\n",
    "        X_test_tensor = torch.tensor(x_test.values)\n",
    "        Y_train_tensor = torch.tensor(y_train.values).reshape(-1, 1)\n",
    "        Y_test_tensor = torch.tensor(y_test.values).reshape(-1,1)\n",
    "\n",
    "        # Set up the Model\n",
    "        Num_Features = X.shape[1]  # takes variable 'x'\n",
    "        outputDim = 1  # takes variable 'y'\n",
    "        learningRate = 0.001\n",
    "        epochs = 400\n",
    "\n",
    "        model = linearRegression(Num_Features)\n",
    "        criterion = torch.nn.L1Loss()\n",
    "        optimizer = torch.optim.SGD(model.parameters(), lr=learningRate)\n",
    "\n",
    "        # Run through the model\n",
    "        for j in range(epochs):\n",
    "            # Clear Gradients\n",
    "            optimizer.zero_grad()\n",
    "\n",
    "            # Run Model\n",
    "            outputs = model.forward(X_train_tensor.float())\n",
    "            # Get Lost for Predicted Output\n",
    "            loss = criterion(outputs, Y_train_tensor.float())\n",
    "            # Backward Propogation\n",
    "            loss.backward()\n",
    "            # Update Parameters\n",
    "            optimizer.step()\n",
    "\n",
    "        # Test Prediction of the Model\n",
    "        optimizer.zero_grad()\n",
    "        y_hat = model(X_test_tensor.float())\n",
    "\n",
    "        # Calculate MSE\n",
    "        ## Convert to Numpy\n",
    "        y_hat = y_hat.detach().numpy()\n",
    "        Y_test_tensor = Y_test_tensor.numpy()\n",
    "\n",
    "        ## Now I can calculate the MSE using Scikit Learning\n",
    "        MSE = mean_squared_error(Y_test_tensor, y_hat)\n",
    "        MSE_List.append(MSE)\n",
    "\n",
    "print(MSE_List)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part i\n",
    "\n",
    "Plot a kernel density estimate for the mean square error (MSE) for this model. (Each fold yields an estimate of MSE; find the density estimate using these 30 samples of MSE.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of MSE Observations: 30\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'MSE')"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print Number of MSE Observations\n",
    "print(\"Number of MSE Observations:\", len(MSE_List))\n",
    "\n",
    "# Plot Density Estimate\n",
    "sns.distplot(MSE_List, kde=True, color='blue',hist_kws={'edgecolor':'black'}, rug=True)\n",
    "# Add Labels\n",
    "plt.title(\"Kernel Density Estimate of MSE\")\n",
    "plt.xlabel(\"Exam\")\n",
    "plt.ylabel(\"MSE\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part ii\n",
    "\n",
    "What is E[MSE] for this model?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expected_MSE: 11350592.4567861\n"
     ]
    }
   ],
   "source": [
    "# Average \n",
    "Expected_MSE = np.average(MSE_List)\n",
    "print(\"Expected_MSE:\", average)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part iii¶\n",
    "\n",
    "Compute the variance for this model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance: 426591369057087.94\n"
     ]
    }
   ],
   "source": [
    "variance = np.var(MSE_List)\n",
    "print(\"Variance:\", variance)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part iv\n",
    "\n",
    "Find the (bias)^2 + noise variance for this model, assuming E{MSE} is a good approximation for MSE. (Recall: MSE = E{(t −tˆ)^2} = variance+ (bias)^2 +noise variance)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bias ^2 + noise variance = -426591326102608.75\n"
     ]
    }
   ],
   "source": [
    "# bias^2 + noise variance \n",
    "bias_noise_var = Expected_MSE - variance\n",
    "print(\"Bias ^2 + noise variance =\", bias_noise_var)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problem C\n",
    "\n",
    "\n",
    "Remind us what your proposed model #2 is (write down the equation price = f(features, W)), with the parameters w unspecified\n",
    "\n",
    "price = length + curb-weight + engine-size + horsepower + city-mpg + compression-ratio\n",
    "\n",
    "For your proposed model #2, perform linear regression with 3-10 folds cross validation (3 independent repetitions of 10-folds cross-validation) to evaluate the consistency in both the estiamted model and the model performance.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[74578661.14167967, 18861990.926021002, 20194550.445635237, 63106743.743406296, 32619183.164380886, 25022898.654152393, 85617650.81115368, 58101025.67482543, 12620852.14096797, 10570406.61653993, 27022769.5887321, 23611487.10699297, 6289794.700319672, 52989762.78715597, 72334297.94180124, 10773105.628715679, 77881859.5424605, 50436735.89158737, 51237509.07682164, 36054404.6737396, 18253489.158930015, 27151673.50955217, 41078524.032492206, 52358033.82713701, 73032820.03459828, 110355872.7520602, 49657266.50191608, 9660827.478786469, 15259086.05501367, 15751987.672362942]\n"
     ]
    }
   ],
   "source": [
    "# Prepare First Model\n",
    "Model_1 = read_data()\n",
    "\n",
    "# Create the X and Y Variables of the model\n",
    "# Create the X Variables in our model\n",
    "X = Model_1[[\"length\",\"curb-weight\",\"engine-size\",\"horsepower\", \"city-mpg\", \"compression-ratio\"]]\n",
    "\n",
    "# Create the Y Variable in our model\n",
    "Y = Model_1[\"price\"]\n",
    "\n",
    "# Set Up The K-Folds\n",
    "K = 10\n",
    "kf = KFold(n_splits=10, shuffle=True)\n",
    "\n",
    "MSE_List = []\n",
    "for i in range(3):\n",
    "    for train_index, test_index in kf.split(X):\n",
    "        # Split the Dataset\n",
    "        x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n",
    "        y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n",
    "        # Turn values into tensors\n",
    "        X_train_tensor = torch.tensor(x_train.values)\n",
    "        X_test_tensor = torch.tensor(x_test.values)\n",
    "        Y_train_tensor = torch.tensor(y_train.values).reshape(-1, 1)\n",
    "        Y_test_tensor = torch.tensor(y_test.values).reshape(-1,1)\n",
    "\n",
    "        # Set up the Model\n",
    "        Num_Features = X.shape[1]  # takes variable 'x'\n",
    "        outputDim = 1  # takes variable 'y'\n",
    "        learningRate = 0.001\n",
    "        epochs = 400\n",
    "\n",
    "        model = linearRegression(Num_Features)\n",
    "        criterion = torch.nn.L1Loss()\n",
    "        optimizer = torch.optim.SGD(model.parameters(), lr=learningRate)\n",
    "\n",
    "        # Run through the model\n",
    "        for j in range(epochs):\n",
    "            # Clear Gradients\n",
    "            optimizer.zero_grad()\n",
    "\n",
    "            # Run Model\n",
    "            outputs = model.forward(X_train_tensor.float())\n",
    "            # Get Lost for Predicted Output\n",
    "            loss = criterion(outputs, Y_train_tensor.float())\n",
    "            # Backward Propogation\n",
    "            loss.backward()\n",
    "            # Update Parameters\n",
    "            optimizer.step()\n",
    "\n",
    "        # Test Prediction of the Model\n",
    "        optimizer.zero_grad()\n",
    "        y_hat = model(X_test_tensor.float())\n",
    "\n",
    "        # Calculate MSE\n",
    "        ## Convert to Numpy\n",
    "        y_hat = y_hat.detach().numpy()\n",
    "        Y_test_tensor = Y_test_tensor.numpy()\n",
    "\n",
    "        ## Now I can calculate the MSE using Scikit Learning\n",
    "        MSE = mean_squared_error(Y_test_tensor, y_hat)\n",
    "        MSE_List.append(MSE)\n",
    "\n",
    "print(MSE_List)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part i\n",
    "\n",
    "Plot a kernel density estimate for the mean square error (MSE) for this model. (Each fold yields an estimate of MSE; find the density estimate using these 30 samples of MSE.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of MSE Observations: 30\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'MSE')"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print Number of MSE Observations\n",
    "print(\"Number of MSE Observations:\", len(MSE_List))\n",
    "\n",
    "# Plot Density Estimate\n",
    "sns.distplot(MSE_List, kde=True, color='blue',hist_kws={'edgecolor':'black'}, rug=True)\n",
    "# Add Labels\n",
    "plt.title(\"Kernel Density Estimate of MSE\")\n",
    "plt.xlabel(\"Exam\")\n",
    "plt.ylabel(\"MSE\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part ii\n",
    "\n",
    "What is E[MSE] for this model?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Expected_MSE: 11350592.4567861\n"
     ]
    }
   ],
   "source": [
    "# Average \n",
    "Expected_MSE = np.average(MSE_List)\n",
    "print(\"Expected_MSE:\", average)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part iii¶\n",
    "\n",
    "Compute the variance for this model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variance: 707645975135550.0\n"
     ]
    }
   ],
   "source": [
    "variance = np.var(MSE_List)\n",
    "print(\"Variance:\", variance)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Part iv\n",
    "\n",
    "Find the (bias)^2 + noise variance for this model, assuming E{MSE} is a good approximation for MSE. (Recall: MSE = E{(t −tˆ)^2} = variance+ (bias)^2 +noise variance)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bias ^2 + noise variance = -707645934386041.0\n"
     ]
    }
   ],
   "source": [
    "# bias^2 + noise variance \n",
    "bias_noise_var = Expected_MSE - variance\n",
    "print(\"Bias ^2 + noise variance =\", bias_noise_var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {
    "height": "798px",
    "left": "847px",
    "top": "231.133px",
    "width": "384px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
